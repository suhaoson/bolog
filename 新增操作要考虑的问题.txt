新增要考虑的问题：

1.在列表页面，必须要有一个新增的按钮，通过点击这个新增按钮，我们可以跳转到新增页面

2.新增页面中，要查询出leo_arctype表所对应的分类

3.设计"保存"按钮

① 当用户没有设置类别的时候,保存按钮是无法点击的,disable状态（未发请求的状态）
② 表单内容验证,可以放在前端，也可以放在后端,事实上最好两端都做下处理.
③ 点击保存的时候，将用户输入的表单内容存入数据库中.
④ 数据保存成功之后，提示用户已经成功,如果发生失败，提示失败的原因.
⑤ 成功之后跳转到列表页面.

删除要考虑的问题:

1.在列表页面，必须要有一个删除的按钮,那么在删除之前，提示是否删除并且在执行删除命令之前,要获取到删除内容的ID
2.利用angular的数据双向绑定，那么将删除内容所对应的DOM元素删除掉.
3.将数据从数据库当中删除.
4.提示用户删除成功或者删除失败.


修改要考虑的问题：

1.在列表页面，必须要有一个修改的按钮,在执行修改命令之前，要获取修改内容的ID
2.通过ID查询到修改内容在数据库中保存时候的内容.并且输出到页面中去.
3.表单验证,验证用户是否修改？修改格式是否正确？
4.验证通过之后，将用户修改过去的内容存入数据库中.update()
5.提示修改成功或者修改失败，修改失败停留在当前页面中，修改成功后跳转到列表页面

查询要考虑的问题:
1、分页,第一种方法，放在前端,首先先将所有的数据拉到本地,拉到本地之后，对所有的数据进行分页.
优势：适合小量数据展示，减少HTTP请求

2、分页,第二种方法,首次加载一定数量的文章之后,当用户去点击页数的时候，再向服务器请求页面
优势:适合大量数据的展示,每次只需加载一部分内容即可.


登录操作：

1.收集用户表单数据,并做验证处理.
2.向服务器发送ajax请求，将用户登录名和密码发送给服务器
3.首先验证一下用户名是否存在
4.验证一下密码是否正确
5.将用户的信息保存在cookie或者是session当中.
6.需要登录才能访问的页面，就需要判断一下cookie和sesion中是否有当前用户的登录信息了.
7.有时候，cookie安全性不高，所以，我们除了要判断cookie是否存在之外，还要判断session.
8.登录成功之后，要提示成功或者失败信息，成功跳转，失败重新登录.
9.为了防止用户频繁的登录行为,防止机器注册,设置验证码是一个不错的选择.


注册操作:
1.用户填写表单信息,并做验证处理.
2.将注册信息发送给服务器
3.将注册信息跟数据库里面的数据进行一个对比，看有没有重复注册的,如果有，提示用户重复.
4.信息要放入数据库里面，最后跳转到登录页面.











